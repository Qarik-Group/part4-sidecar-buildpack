// Code generated by counterfeiter. DO NOT EDIT.
package v7fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v7action"
	v7 "code.cloudfoundry.org/cli/command/v7"
)

type FakeDisableFeatureFlagActor struct {
	DisableFeatureFlagStub        func(string) (v7action.Warnings, error)
	disableFeatureFlagMutex       sync.RWMutex
	disableFeatureFlagArgsForCall []struct {
		arg1 string
	}
	disableFeatureFlagReturns struct {
		result1 v7action.Warnings
		result2 error
	}
	disableFeatureFlagReturnsOnCall map[int]struct {
		result1 v7action.Warnings
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDisableFeatureFlagActor) DisableFeatureFlag(arg1 string) (v7action.Warnings, error) {
	fake.disableFeatureFlagMutex.Lock()
	ret, specificReturn := fake.disableFeatureFlagReturnsOnCall[len(fake.disableFeatureFlagArgsForCall)]
	fake.disableFeatureFlagArgsForCall = append(fake.disableFeatureFlagArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DisableFeatureFlag", []interface{}{arg1})
	fake.disableFeatureFlagMutex.Unlock()
	if fake.DisableFeatureFlagStub != nil {
		return fake.DisableFeatureFlagStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disableFeatureFlagReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDisableFeatureFlagActor) DisableFeatureFlagCallCount() int {
	fake.disableFeatureFlagMutex.RLock()
	defer fake.disableFeatureFlagMutex.RUnlock()
	return len(fake.disableFeatureFlagArgsForCall)
}

func (fake *FakeDisableFeatureFlagActor) DisableFeatureFlagCalls(stub func(string) (v7action.Warnings, error)) {
	fake.disableFeatureFlagMutex.Lock()
	defer fake.disableFeatureFlagMutex.Unlock()
	fake.DisableFeatureFlagStub = stub
}

func (fake *FakeDisableFeatureFlagActor) DisableFeatureFlagArgsForCall(i int) string {
	fake.disableFeatureFlagMutex.RLock()
	defer fake.disableFeatureFlagMutex.RUnlock()
	argsForCall := fake.disableFeatureFlagArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDisableFeatureFlagActor) DisableFeatureFlagReturns(result1 v7action.Warnings, result2 error) {
	fake.disableFeatureFlagMutex.Lock()
	defer fake.disableFeatureFlagMutex.Unlock()
	fake.DisableFeatureFlagStub = nil
	fake.disableFeatureFlagReturns = struct {
		result1 v7action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeDisableFeatureFlagActor) DisableFeatureFlagReturnsOnCall(i int, result1 v7action.Warnings, result2 error) {
	fake.disableFeatureFlagMutex.Lock()
	defer fake.disableFeatureFlagMutex.Unlock()
	fake.DisableFeatureFlagStub = nil
	if fake.disableFeatureFlagReturnsOnCall == nil {
		fake.disableFeatureFlagReturnsOnCall = make(map[int]struct {
			result1 v7action.Warnings
			result2 error
		})
	}
	fake.disableFeatureFlagReturnsOnCall[i] = struct {
		result1 v7action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeDisableFeatureFlagActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.disableFeatureFlagMutex.RLock()
	defer fake.disableFeatureFlagMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDisableFeatureFlagActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v7.DisableFeatureFlagActor = new(FakeDisableFeatureFlagActor)
