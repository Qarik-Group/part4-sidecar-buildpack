// Code generated by counterfeiter. DO NOT EDIT.
package v7fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v7action"
	v7 "code.cloudfoundry.org/cli/command/v7"
)

type FakeDeleteBuildpackActor struct {
	DeleteBuildpackByNameAndStackStub        func(string, string) (v7action.Warnings, error)
	deleteBuildpackByNameAndStackMutex       sync.RWMutex
	deleteBuildpackByNameAndStackArgsForCall []struct {
		arg1 string
		arg2 string
	}
	deleteBuildpackByNameAndStackReturns struct {
		result1 v7action.Warnings
		result2 error
	}
	deleteBuildpackByNameAndStackReturnsOnCall map[int]struct {
		result1 v7action.Warnings
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDeleteBuildpackActor) DeleteBuildpackByNameAndStack(arg1 string, arg2 string) (v7action.Warnings, error) {
	fake.deleteBuildpackByNameAndStackMutex.Lock()
	ret, specificReturn := fake.deleteBuildpackByNameAndStackReturnsOnCall[len(fake.deleteBuildpackByNameAndStackArgsForCall)]
	fake.deleteBuildpackByNameAndStackArgsForCall = append(fake.deleteBuildpackByNameAndStackArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("DeleteBuildpackByNameAndStack", []interface{}{arg1, arg2})
	fake.deleteBuildpackByNameAndStackMutex.Unlock()
	if fake.DeleteBuildpackByNameAndStackStub != nil {
		return fake.DeleteBuildpackByNameAndStackStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteBuildpackByNameAndStackReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDeleteBuildpackActor) DeleteBuildpackByNameAndStackCallCount() int {
	fake.deleteBuildpackByNameAndStackMutex.RLock()
	defer fake.deleteBuildpackByNameAndStackMutex.RUnlock()
	return len(fake.deleteBuildpackByNameAndStackArgsForCall)
}

func (fake *FakeDeleteBuildpackActor) DeleteBuildpackByNameAndStackCalls(stub func(string, string) (v7action.Warnings, error)) {
	fake.deleteBuildpackByNameAndStackMutex.Lock()
	defer fake.deleteBuildpackByNameAndStackMutex.Unlock()
	fake.DeleteBuildpackByNameAndStackStub = stub
}

func (fake *FakeDeleteBuildpackActor) DeleteBuildpackByNameAndStackArgsForCall(i int) (string, string) {
	fake.deleteBuildpackByNameAndStackMutex.RLock()
	defer fake.deleteBuildpackByNameAndStackMutex.RUnlock()
	argsForCall := fake.deleteBuildpackByNameAndStackArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDeleteBuildpackActor) DeleteBuildpackByNameAndStackReturns(result1 v7action.Warnings, result2 error) {
	fake.deleteBuildpackByNameAndStackMutex.Lock()
	defer fake.deleteBuildpackByNameAndStackMutex.Unlock()
	fake.DeleteBuildpackByNameAndStackStub = nil
	fake.deleteBuildpackByNameAndStackReturns = struct {
		result1 v7action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeDeleteBuildpackActor) DeleteBuildpackByNameAndStackReturnsOnCall(i int, result1 v7action.Warnings, result2 error) {
	fake.deleteBuildpackByNameAndStackMutex.Lock()
	defer fake.deleteBuildpackByNameAndStackMutex.Unlock()
	fake.DeleteBuildpackByNameAndStackStub = nil
	if fake.deleteBuildpackByNameAndStackReturnsOnCall == nil {
		fake.deleteBuildpackByNameAndStackReturnsOnCall = make(map[int]struct {
			result1 v7action.Warnings
			result2 error
		})
	}
	fake.deleteBuildpackByNameAndStackReturnsOnCall[i] = struct {
		result1 v7action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeDeleteBuildpackActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteBuildpackByNameAndStackMutex.RLock()
	defer fake.deleteBuildpackByNameAndStackMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDeleteBuildpackActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v7.DeleteBuildpackActor = new(FakeDeleteBuildpackActor)
