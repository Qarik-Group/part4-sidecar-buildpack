// Code generated by counterfeiter. DO NOT EDIT.
package v7fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v7action"
	v7 "code.cloudfoundry.org/cli/command/v7"
)

type FakeDeleteSharedDomainActor struct {
	DeleteSharedDomainStub        func(string) (v7action.Warnings, error)
	deleteSharedDomainMutex       sync.RWMutex
	deleteSharedDomainArgsForCall []struct {
		arg1 string
	}
	deleteSharedDomainReturns struct {
		result1 v7action.Warnings
		result2 error
	}
	deleteSharedDomainReturnsOnCall map[int]struct {
		result1 v7action.Warnings
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDeleteSharedDomainActor) DeleteSharedDomain(arg1 string) (v7action.Warnings, error) {
	fake.deleteSharedDomainMutex.Lock()
	ret, specificReturn := fake.deleteSharedDomainReturnsOnCall[len(fake.deleteSharedDomainArgsForCall)]
	fake.deleteSharedDomainArgsForCall = append(fake.deleteSharedDomainArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeleteSharedDomain", []interface{}{arg1})
	fake.deleteSharedDomainMutex.Unlock()
	if fake.DeleteSharedDomainStub != nil {
		return fake.DeleteSharedDomainStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteSharedDomainReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDeleteSharedDomainActor) DeleteSharedDomainCallCount() int {
	fake.deleteSharedDomainMutex.RLock()
	defer fake.deleteSharedDomainMutex.RUnlock()
	return len(fake.deleteSharedDomainArgsForCall)
}

func (fake *FakeDeleteSharedDomainActor) DeleteSharedDomainCalls(stub func(string) (v7action.Warnings, error)) {
	fake.deleteSharedDomainMutex.Lock()
	defer fake.deleteSharedDomainMutex.Unlock()
	fake.DeleteSharedDomainStub = stub
}

func (fake *FakeDeleteSharedDomainActor) DeleteSharedDomainArgsForCall(i int) string {
	fake.deleteSharedDomainMutex.RLock()
	defer fake.deleteSharedDomainMutex.RUnlock()
	argsForCall := fake.deleteSharedDomainArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDeleteSharedDomainActor) DeleteSharedDomainReturns(result1 v7action.Warnings, result2 error) {
	fake.deleteSharedDomainMutex.Lock()
	defer fake.deleteSharedDomainMutex.Unlock()
	fake.DeleteSharedDomainStub = nil
	fake.deleteSharedDomainReturns = struct {
		result1 v7action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeDeleteSharedDomainActor) DeleteSharedDomainReturnsOnCall(i int, result1 v7action.Warnings, result2 error) {
	fake.deleteSharedDomainMutex.Lock()
	defer fake.deleteSharedDomainMutex.Unlock()
	fake.DeleteSharedDomainStub = nil
	if fake.deleteSharedDomainReturnsOnCall == nil {
		fake.deleteSharedDomainReturnsOnCall = make(map[int]struct {
			result1 v7action.Warnings
			result2 error
		})
	}
	fake.deleteSharedDomainReturnsOnCall[i] = struct {
		result1 v7action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeDeleteSharedDomainActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteSharedDomainMutex.RLock()
	defer fake.deleteSharedDomainMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDeleteSharedDomainActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v7.DeleteSharedDomainActor = new(FakeDeleteSharedDomainActor)
