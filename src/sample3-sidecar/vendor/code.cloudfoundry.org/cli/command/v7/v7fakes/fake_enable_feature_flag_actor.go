// Code generated by counterfeiter. DO NOT EDIT.
package v7fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v7action"
	v7 "code.cloudfoundry.org/cli/command/v7"
)

type FakeEnableFeatureFlagActor struct {
	EnableFeatureFlagStub        func(string) (v7action.Warnings, error)
	enableFeatureFlagMutex       sync.RWMutex
	enableFeatureFlagArgsForCall []struct {
		arg1 string
	}
	enableFeatureFlagReturns struct {
		result1 v7action.Warnings
		result2 error
	}
	enableFeatureFlagReturnsOnCall map[int]struct {
		result1 v7action.Warnings
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEnableFeatureFlagActor) EnableFeatureFlag(arg1 string) (v7action.Warnings, error) {
	fake.enableFeatureFlagMutex.Lock()
	ret, specificReturn := fake.enableFeatureFlagReturnsOnCall[len(fake.enableFeatureFlagArgsForCall)]
	fake.enableFeatureFlagArgsForCall = append(fake.enableFeatureFlagArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("EnableFeatureFlag", []interface{}{arg1})
	fake.enableFeatureFlagMutex.Unlock()
	if fake.EnableFeatureFlagStub != nil {
		return fake.EnableFeatureFlagStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.enableFeatureFlagReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEnableFeatureFlagActor) EnableFeatureFlagCallCount() int {
	fake.enableFeatureFlagMutex.RLock()
	defer fake.enableFeatureFlagMutex.RUnlock()
	return len(fake.enableFeatureFlagArgsForCall)
}

func (fake *FakeEnableFeatureFlagActor) EnableFeatureFlagCalls(stub func(string) (v7action.Warnings, error)) {
	fake.enableFeatureFlagMutex.Lock()
	defer fake.enableFeatureFlagMutex.Unlock()
	fake.EnableFeatureFlagStub = stub
}

func (fake *FakeEnableFeatureFlagActor) EnableFeatureFlagArgsForCall(i int) string {
	fake.enableFeatureFlagMutex.RLock()
	defer fake.enableFeatureFlagMutex.RUnlock()
	argsForCall := fake.enableFeatureFlagArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEnableFeatureFlagActor) EnableFeatureFlagReturns(result1 v7action.Warnings, result2 error) {
	fake.enableFeatureFlagMutex.Lock()
	defer fake.enableFeatureFlagMutex.Unlock()
	fake.EnableFeatureFlagStub = nil
	fake.enableFeatureFlagReturns = struct {
		result1 v7action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeEnableFeatureFlagActor) EnableFeatureFlagReturnsOnCall(i int, result1 v7action.Warnings, result2 error) {
	fake.enableFeatureFlagMutex.Lock()
	defer fake.enableFeatureFlagMutex.Unlock()
	fake.EnableFeatureFlagStub = nil
	if fake.enableFeatureFlagReturnsOnCall == nil {
		fake.enableFeatureFlagReturnsOnCall = make(map[int]struct {
			result1 v7action.Warnings
			result2 error
		})
	}
	fake.enableFeatureFlagReturnsOnCall[i] = struct {
		result1 v7action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeEnableFeatureFlagActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.enableFeatureFlagMutex.RLock()
	defer fake.enableFeatureFlagMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEnableFeatureFlagActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v7.EnableFeatureFlagActor = new(FakeEnableFeatureFlagActor)
