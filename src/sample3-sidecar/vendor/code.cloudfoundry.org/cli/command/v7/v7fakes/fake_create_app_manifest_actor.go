// Code generated by counterfeiter. DO NOT EDIT.
package v7fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v7action"
	v7 "code.cloudfoundry.org/cli/command/v7"
)

type FakeCreateAppManifestActor struct {
	GetRawApplicationManifestByNameAndSpaceStub        func(string, string) ([]byte, v7action.Warnings, error)
	getRawApplicationManifestByNameAndSpaceMutex       sync.RWMutex
	getRawApplicationManifestByNameAndSpaceArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getRawApplicationManifestByNameAndSpaceReturns struct {
		result1 []byte
		result2 v7action.Warnings
		result3 error
	}
	getRawApplicationManifestByNameAndSpaceReturnsOnCall map[int]struct {
		result1 []byte
		result2 v7action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCreateAppManifestActor) GetRawApplicationManifestByNameAndSpace(arg1 string, arg2 string) ([]byte, v7action.Warnings, error) {
	fake.getRawApplicationManifestByNameAndSpaceMutex.Lock()
	ret, specificReturn := fake.getRawApplicationManifestByNameAndSpaceReturnsOnCall[len(fake.getRawApplicationManifestByNameAndSpaceArgsForCall)]
	fake.getRawApplicationManifestByNameAndSpaceArgsForCall = append(fake.getRawApplicationManifestByNameAndSpaceArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetRawApplicationManifestByNameAndSpace", []interface{}{arg1, arg2})
	fake.getRawApplicationManifestByNameAndSpaceMutex.Unlock()
	if fake.GetRawApplicationManifestByNameAndSpaceStub != nil {
		return fake.GetRawApplicationManifestByNameAndSpaceStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getRawApplicationManifestByNameAndSpaceReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeCreateAppManifestActor) GetRawApplicationManifestByNameAndSpaceCallCount() int {
	fake.getRawApplicationManifestByNameAndSpaceMutex.RLock()
	defer fake.getRawApplicationManifestByNameAndSpaceMutex.RUnlock()
	return len(fake.getRawApplicationManifestByNameAndSpaceArgsForCall)
}

func (fake *FakeCreateAppManifestActor) GetRawApplicationManifestByNameAndSpaceCalls(stub func(string, string) ([]byte, v7action.Warnings, error)) {
	fake.getRawApplicationManifestByNameAndSpaceMutex.Lock()
	defer fake.getRawApplicationManifestByNameAndSpaceMutex.Unlock()
	fake.GetRawApplicationManifestByNameAndSpaceStub = stub
}

func (fake *FakeCreateAppManifestActor) GetRawApplicationManifestByNameAndSpaceArgsForCall(i int) (string, string) {
	fake.getRawApplicationManifestByNameAndSpaceMutex.RLock()
	defer fake.getRawApplicationManifestByNameAndSpaceMutex.RUnlock()
	argsForCall := fake.getRawApplicationManifestByNameAndSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCreateAppManifestActor) GetRawApplicationManifestByNameAndSpaceReturns(result1 []byte, result2 v7action.Warnings, result3 error) {
	fake.getRawApplicationManifestByNameAndSpaceMutex.Lock()
	defer fake.getRawApplicationManifestByNameAndSpaceMutex.Unlock()
	fake.GetRawApplicationManifestByNameAndSpaceStub = nil
	fake.getRawApplicationManifestByNameAndSpaceReturns = struct {
		result1 []byte
		result2 v7action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCreateAppManifestActor) GetRawApplicationManifestByNameAndSpaceReturnsOnCall(i int, result1 []byte, result2 v7action.Warnings, result3 error) {
	fake.getRawApplicationManifestByNameAndSpaceMutex.Lock()
	defer fake.getRawApplicationManifestByNameAndSpaceMutex.Unlock()
	fake.GetRawApplicationManifestByNameAndSpaceStub = nil
	if fake.getRawApplicationManifestByNameAndSpaceReturnsOnCall == nil {
		fake.getRawApplicationManifestByNameAndSpaceReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 v7action.Warnings
			result3 error
		})
	}
	fake.getRawApplicationManifestByNameAndSpaceReturnsOnCall[i] = struct {
		result1 []byte
		result2 v7action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCreateAppManifestActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getRawApplicationManifestByNameAndSpaceMutex.RLock()
	defer fake.getRawApplicationManifestByNameAndSpaceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCreateAppManifestActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v7.CreateAppManifestActor = new(FakeCreateAppManifestActor)
