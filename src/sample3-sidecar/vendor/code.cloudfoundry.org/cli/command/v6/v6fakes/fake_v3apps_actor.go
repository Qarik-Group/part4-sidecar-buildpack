// Code generated by counterfeiter. DO NOT EDIT.
package v6fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v3action"
	v6 "code.cloudfoundry.org/cli/command/v6"
)

type FakeV3AppsActor struct {
	GetApplicationsWithProcessesBySpaceStub        func(string) ([]v3action.ApplicationWithProcessSummary, v3action.Warnings, error)
	getApplicationsWithProcessesBySpaceMutex       sync.RWMutex
	getApplicationsWithProcessesBySpaceArgsForCall []struct {
		arg1 string
	}
	getApplicationsWithProcessesBySpaceReturns struct {
		result1 []v3action.ApplicationWithProcessSummary
		result2 v3action.Warnings
		result3 error
	}
	getApplicationsWithProcessesBySpaceReturnsOnCall map[int]struct {
		result1 []v3action.ApplicationWithProcessSummary
		result2 v3action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeV3AppsActor) GetApplicationsWithProcessesBySpace(arg1 string) ([]v3action.ApplicationWithProcessSummary, v3action.Warnings, error) {
	fake.getApplicationsWithProcessesBySpaceMutex.Lock()
	ret, specificReturn := fake.getApplicationsWithProcessesBySpaceReturnsOnCall[len(fake.getApplicationsWithProcessesBySpaceArgsForCall)]
	fake.getApplicationsWithProcessesBySpaceArgsForCall = append(fake.getApplicationsWithProcessesBySpaceArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetApplicationsWithProcessesBySpace", []interface{}{arg1})
	fake.getApplicationsWithProcessesBySpaceMutex.Unlock()
	if fake.GetApplicationsWithProcessesBySpaceStub != nil {
		return fake.GetApplicationsWithProcessesBySpaceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getApplicationsWithProcessesBySpaceReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeV3AppsActor) GetApplicationsWithProcessesBySpaceCallCount() int {
	fake.getApplicationsWithProcessesBySpaceMutex.RLock()
	defer fake.getApplicationsWithProcessesBySpaceMutex.RUnlock()
	return len(fake.getApplicationsWithProcessesBySpaceArgsForCall)
}

func (fake *FakeV3AppsActor) GetApplicationsWithProcessesBySpaceCalls(stub func(string) ([]v3action.ApplicationWithProcessSummary, v3action.Warnings, error)) {
	fake.getApplicationsWithProcessesBySpaceMutex.Lock()
	defer fake.getApplicationsWithProcessesBySpaceMutex.Unlock()
	fake.GetApplicationsWithProcessesBySpaceStub = stub
}

func (fake *FakeV3AppsActor) GetApplicationsWithProcessesBySpaceArgsForCall(i int) string {
	fake.getApplicationsWithProcessesBySpaceMutex.RLock()
	defer fake.getApplicationsWithProcessesBySpaceMutex.RUnlock()
	argsForCall := fake.getApplicationsWithProcessesBySpaceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeV3AppsActor) GetApplicationsWithProcessesBySpaceReturns(result1 []v3action.ApplicationWithProcessSummary, result2 v3action.Warnings, result3 error) {
	fake.getApplicationsWithProcessesBySpaceMutex.Lock()
	defer fake.getApplicationsWithProcessesBySpaceMutex.Unlock()
	fake.GetApplicationsWithProcessesBySpaceStub = nil
	fake.getApplicationsWithProcessesBySpaceReturns = struct {
		result1 []v3action.ApplicationWithProcessSummary
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV3AppsActor) GetApplicationsWithProcessesBySpaceReturnsOnCall(i int, result1 []v3action.ApplicationWithProcessSummary, result2 v3action.Warnings, result3 error) {
	fake.getApplicationsWithProcessesBySpaceMutex.Lock()
	defer fake.getApplicationsWithProcessesBySpaceMutex.Unlock()
	fake.GetApplicationsWithProcessesBySpaceStub = nil
	if fake.getApplicationsWithProcessesBySpaceReturnsOnCall == nil {
		fake.getApplicationsWithProcessesBySpaceReturnsOnCall = make(map[int]struct {
			result1 []v3action.ApplicationWithProcessSummary
			result2 v3action.Warnings
			result3 error
		})
	}
	fake.getApplicationsWithProcessesBySpaceReturnsOnCall[i] = struct {
		result1 []v3action.ApplicationWithProcessSummary
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV3AppsActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getApplicationsWithProcessesBySpaceMutex.RLock()
	defer fake.getApplicationsWithProcessesBySpaceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeV3AppsActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v6.V3AppsActor = new(FakeV3AppsActor)
