// Code generated by counterfeiter. DO NOT EDIT.
package v6fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v3action"
	v6 "code.cloudfoundry.org/cli/command/v6"
)

type FakeDeleteIsolationSegmentActor struct {
	DeleteIsolationSegmentByNameStub        func(string) (v3action.Warnings, error)
	deleteIsolationSegmentByNameMutex       sync.RWMutex
	deleteIsolationSegmentByNameArgsForCall []struct {
		arg1 string
	}
	deleteIsolationSegmentByNameReturns struct {
		result1 v3action.Warnings
		result2 error
	}
	deleteIsolationSegmentByNameReturnsOnCall map[int]struct {
		result1 v3action.Warnings
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDeleteIsolationSegmentActor) DeleteIsolationSegmentByName(arg1 string) (v3action.Warnings, error) {
	fake.deleteIsolationSegmentByNameMutex.Lock()
	ret, specificReturn := fake.deleteIsolationSegmentByNameReturnsOnCall[len(fake.deleteIsolationSegmentByNameArgsForCall)]
	fake.deleteIsolationSegmentByNameArgsForCall = append(fake.deleteIsolationSegmentByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeleteIsolationSegmentByName", []interface{}{arg1})
	fake.deleteIsolationSegmentByNameMutex.Unlock()
	if fake.DeleteIsolationSegmentByNameStub != nil {
		return fake.DeleteIsolationSegmentByNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteIsolationSegmentByNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDeleteIsolationSegmentActor) DeleteIsolationSegmentByNameCallCount() int {
	fake.deleteIsolationSegmentByNameMutex.RLock()
	defer fake.deleteIsolationSegmentByNameMutex.RUnlock()
	return len(fake.deleteIsolationSegmentByNameArgsForCall)
}

func (fake *FakeDeleteIsolationSegmentActor) DeleteIsolationSegmentByNameCalls(stub func(string) (v3action.Warnings, error)) {
	fake.deleteIsolationSegmentByNameMutex.Lock()
	defer fake.deleteIsolationSegmentByNameMutex.Unlock()
	fake.DeleteIsolationSegmentByNameStub = stub
}

func (fake *FakeDeleteIsolationSegmentActor) DeleteIsolationSegmentByNameArgsForCall(i int) string {
	fake.deleteIsolationSegmentByNameMutex.RLock()
	defer fake.deleteIsolationSegmentByNameMutex.RUnlock()
	argsForCall := fake.deleteIsolationSegmentByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDeleteIsolationSegmentActor) DeleteIsolationSegmentByNameReturns(result1 v3action.Warnings, result2 error) {
	fake.deleteIsolationSegmentByNameMutex.Lock()
	defer fake.deleteIsolationSegmentByNameMutex.Unlock()
	fake.DeleteIsolationSegmentByNameStub = nil
	fake.deleteIsolationSegmentByNameReturns = struct {
		result1 v3action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeDeleteIsolationSegmentActor) DeleteIsolationSegmentByNameReturnsOnCall(i int, result1 v3action.Warnings, result2 error) {
	fake.deleteIsolationSegmentByNameMutex.Lock()
	defer fake.deleteIsolationSegmentByNameMutex.Unlock()
	fake.DeleteIsolationSegmentByNameStub = nil
	if fake.deleteIsolationSegmentByNameReturnsOnCall == nil {
		fake.deleteIsolationSegmentByNameReturnsOnCall = make(map[int]struct {
			result1 v3action.Warnings
			result2 error
		})
	}
	fake.deleteIsolationSegmentByNameReturnsOnCall[i] = struct {
		result1 v3action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeDeleteIsolationSegmentActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteIsolationSegmentByNameMutex.RLock()
	defer fake.deleteIsolationSegmentByNameMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDeleteIsolationSegmentActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v6.DeleteIsolationSegmentActor = new(FakeDeleteIsolationSegmentActor)
