// Code generated by counterfeiter. DO NOT EDIT.
package v6fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v2action"
	v6 "code.cloudfoundry.org/cli/command/v6"
)

type FakeDomainsActor struct {
	GetDomainsStub        func(string) ([]v2action.Domain, v2action.Warnings, error)
	getDomainsMutex       sync.RWMutex
	getDomainsArgsForCall []struct {
		arg1 string
	}
	getDomainsReturns struct {
		result1 []v2action.Domain
		result2 v2action.Warnings
		result3 error
	}
	getDomainsReturnsOnCall map[int]struct {
		result1 []v2action.Domain
		result2 v2action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDomainsActor) GetDomains(arg1 string) ([]v2action.Domain, v2action.Warnings, error) {
	fake.getDomainsMutex.Lock()
	ret, specificReturn := fake.getDomainsReturnsOnCall[len(fake.getDomainsArgsForCall)]
	fake.getDomainsArgsForCall = append(fake.getDomainsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetDomains", []interface{}{arg1})
	fake.getDomainsMutex.Unlock()
	if fake.GetDomainsStub != nil {
		return fake.GetDomainsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getDomainsReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeDomainsActor) GetDomainsCallCount() int {
	fake.getDomainsMutex.RLock()
	defer fake.getDomainsMutex.RUnlock()
	return len(fake.getDomainsArgsForCall)
}

func (fake *FakeDomainsActor) GetDomainsCalls(stub func(string) ([]v2action.Domain, v2action.Warnings, error)) {
	fake.getDomainsMutex.Lock()
	defer fake.getDomainsMutex.Unlock()
	fake.GetDomainsStub = stub
}

func (fake *FakeDomainsActor) GetDomainsArgsForCall(i int) string {
	fake.getDomainsMutex.RLock()
	defer fake.getDomainsMutex.RUnlock()
	argsForCall := fake.getDomainsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDomainsActor) GetDomainsReturns(result1 []v2action.Domain, result2 v2action.Warnings, result3 error) {
	fake.getDomainsMutex.Lock()
	defer fake.getDomainsMutex.Unlock()
	fake.GetDomainsStub = nil
	fake.getDomainsReturns = struct {
		result1 []v2action.Domain
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeDomainsActor) GetDomainsReturnsOnCall(i int, result1 []v2action.Domain, result2 v2action.Warnings, result3 error) {
	fake.getDomainsMutex.Lock()
	defer fake.getDomainsMutex.Unlock()
	fake.GetDomainsStub = nil
	if fake.getDomainsReturnsOnCall == nil {
		fake.getDomainsReturnsOnCall = make(map[int]struct {
			result1 []v2action.Domain
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.getDomainsReturnsOnCall[i] = struct {
		result1 []v2action.Domain
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeDomainsActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getDomainsMutex.RLock()
	defer fake.getDomainsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDomainsActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v6.DomainsActor = new(FakeDomainsActor)
