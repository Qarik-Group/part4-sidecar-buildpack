// Code generated by counterfeiter. DO NOT EDIT.
package v6fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v3action"
	v6 "code.cloudfoundry.org/cli/command/v6"
)

type FakeV3SetEnvActor struct {
	SetEnvironmentVariableByApplicationNameAndSpaceStub        func(string, string, v3action.EnvironmentVariablePair) (v3action.Warnings, error)
	setEnvironmentVariableByApplicationNameAndSpaceMutex       sync.RWMutex
	setEnvironmentVariableByApplicationNameAndSpaceArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 v3action.EnvironmentVariablePair
	}
	setEnvironmentVariableByApplicationNameAndSpaceReturns struct {
		result1 v3action.Warnings
		result2 error
	}
	setEnvironmentVariableByApplicationNameAndSpaceReturnsOnCall map[int]struct {
		result1 v3action.Warnings
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeV3SetEnvActor) SetEnvironmentVariableByApplicationNameAndSpace(arg1 string, arg2 string, arg3 v3action.EnvironmentVariablePair) (v3action.Warnings, error) {
	fake.setEnvironmentVariableByApplicationNameAndSpaceMutex.Lock()
	ret, specificReturn := fake.setEnvironmentVariableByApplicationNameAndSpaceReturnsOnCall[len(fake.setEnvironmentVariableByApplicationNameAndSpaceArgsForCall)]
	fake.setEnvironmentVariableByApplicationNameAndSpaceArgsForCall = append(fake.setEnvironmentVariableByApplicationNameAndSpaceArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 v3action.EnvironmentVariablePair
	}{arg1, arg2, arg3})
	fake.recordInvocation("SetEnvironmentVariableByApplicationNameAndSpace", []interface{}{arg1, arg2, arg3})
	fake.setEnvironmentVariableByApplicationNameAndSpaceMutex.Unlock()
	if fake.SetEnvironmentVariableByApplicationNameAndSpaceStub != nil {
		return fake.SetEnvironmentVariableByApplicationNameAndSpaceStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setEnvironmentVariableByApplicationNameAndSpaceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeV3SetEnvActor) SetEnvironmentVariableByApplicationNameAndSpaceCallCount() int {
	fake.setEnvironmentVariableByApplicationNameAndSpaceMutex.RLock()
	defer fake.setEnvironmentVariableByApplicationNameAndSpaceMutex.RUnlock()
	return len(fake.setEnvironmentVariableByApplicationNameAndSpaceArgsForCall)
}

func (fake *FakeV3SetEnvActor) SetEnvironmentVariableByApplicationNameAndSpaceCalls(stub func(string, string, v3action.EnvironmentVariablePair) (v3action.Warnings, error)) {
	fake.setEnvironmentVariableByApplicationNameAndSpaceMutex.Lock()
	defer fake.setEnvironmentVariableByApplicationNameAndSpaceMutex.Unlock()
	fake.SetEnvironmentVariableByApplicationNameAndSpaceStub = stub
}

func (fake *FakeV3SetEnvActor) SetEnvironmentVariableByApplicationNameAndSpaceArgsForCall(i int) (string, string, v3action.EnvironmentVariablePair) {
	fake.setEnvironmentVariableByApplicationNameAndSpaceMutex.RLock()
	defer fake.setEnvironmentVariableByApplicationNameAndSpaceMutex.RUnlock()
	argsForCall := fake.setEnvironmentVariableByApplicationNameAndSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeV3SetEnvActor) SetEnvironmentVariableByApplicationNameAndSpaceReturns(result1 v3action.Warnings, result2 error) {
	fake.setEnvironmentVariableByApplicationNameAndSpaceMutex.Lock()
	defer fake.setEnvironmentVariableByApplicationNameAndSpaceMutex.Unlock()
	fake.SetEnvironmentVariableByApplicationNameAndSpaceStub = nil
	fake.setEnvironmentVariableByApplicationNameAndSpaceReturns = struct {
		result1 v3action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeV3SetEnvActor) SetEnvironmentVariableByApplicationNameAndSpaceReturnsOnCall(i int, result1 v3action.Warnings, result2 error) {
	fake.setEnvironmentVariableByApplicationNameAndSpaceMutex.Lock()
	defer fake.setEnvironmentVariableByApplicationNameAndSpaceMutex.Unlock()
	fake.SetEnvironmentVariableByApplicationNameAndSpaceStub = nil
	if fake.setEnvironmentVariableByApplicationNameAndSpaceReturnsOnCall == nil {
		fake.setEnvironmentVariableByApplicationNameAndSpaceReturnsOnCall = make(map[int]struct {
			result1 v3action.Warnings
			result2 error
		})
	}
	fake.setEnvironmentVariableByApplicationNameAndSpaceReturnsOnCall[i] = struct {
		result1 v3action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeV3SetEnvActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.setEnvironmentVariableByApplicationNameAndSpaceMutex.RLock()
	defer fake.setEnvironmentVariableByApplicationNameAndSpaceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeV3SetEnvActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v6.V3SetEnvActor = new(FakeV3SetEnvActor)
